// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum ObjectType : int {
  OBJECT_TYPE_NONE = 0,
  OBJECT_TYPE_CREATURE = 1,
  OBJECT_TYPE_PROJECTILE = 2,
  OBJECT_TYPE_ENV = 3,
  ObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ObjectType_IsValid(int value);
constexpr ObjectType ObjectType_MIN = OBJECT_TYPE_NONE;
constexpr ObjectType ObjectType_MAX = OBJECT_TYPE_ENV;
constexpr int ObjectType_ARRAYSIZE = ObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectType_descriptor();
template<typename T>
inline const std::string& ObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObjectType_descriptor(), enum_t_value);
}
inline bool ObjectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObjectType>(
    ObjectType_descriptor(), name, value);
}
enum CreatureType : int {
  CREATURE_TYPE_NONE = 0,
  CREATURE_TYPE_PLAYER = 1,
  CREATURE_TYPE_MONSTER = 2,
  CREATURE_TYPE_NPC = 3,
  CreatureType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CreatureType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CreatureType_IsValid(int value);
constexpr CreatureType CreatureType_MIN = CREATURE_TYPE_NONE;
constexpr CreatureType CreatureType_MAX = CREATURE_TYPE_NPC;
constexpr int CreatureType_ARRAYSIZE = CreatureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreatureType_descriptor();
template<typename T>
inline const std::string& CreatureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreatureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreatureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreatureType_descriptor(), enum_t_value);
}
inline bool CreatureType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreatureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreatureType>(
    CreatureType_descriptor(), name, value);
}
enum MonsterAttackType : int {
  MONSTER_ATTACK_TYPE_NONE = 0,
  MONSTER_ATTACK_TYPE_PUNCH = 1,
  MONSTER_ATTACK_TYPE_RIFLE = 2,
  MonsterAttackType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MonsterAttackType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MonsterAttackType_IsValid(int value);
constexpr MonsterAttackType MonsterAttackType_MIN = MONSTER_ATTACK_TYPE_NONE;
constexpr MonsterAttackType MonsterAttackType_MAX = MONSTER_ATTACK_TYPE_RIFLE;
constexpr int MonsterAttackType_ARRAYSIZE = MonsterAttackType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MonsterAttackType_descriptor();
template<typename T>
inline const std::string& MonsterAttackType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MonsterAttackType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MonsterAttackType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MonsterAttackType_descriptor(), enum_t_value);
}
inline bool MonsterAttackType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MonsterAttackType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MonsterAttackType>(
    MonsterAttackType_descriptor(), name, value);
}
enum MoveState : int {
  MOVE_STATE_NONE = 0,
  MOVE_STATE_IDLE = 1,
  MOVE_STATE_RUN = 2,
  MoveState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MoveState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MoveState_IsValid(int value);
constexpr MoveState MoveState_MIN = MOVE_STATE_NONE;
constexpr MoveState MoveState_MAX = MOVE_STATE_RUN;
constexpr int MoveState_ARRAYSIZE = MoveState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoveState_descriptor();
template<typename T>
inline const std::string& MoveState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MoveState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MoveState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MoveState_descriptor(), enum_t_value);
}
inline bool MoveState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MoveState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MoveState>(
    MoveState_descriptor(), name, value);
}
enum AnimationState : int {
  ANIMATION_STATE_NONE = 0,
  ANIMATION_STATE_AIM = 1,
  ANIMATION_STATE_RELOAD = 2,
  ANIMATION_STATE_DIE = 3,
  ANIMATION_STATE_CROUCH = 4,
  ANIMATION_STATE_STAND = 5,
  AnimationState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AnimationState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AnimationState_IsValid(int value);
constexpr AnimationState AnimationState_MIN = ANIMATION_STATE_NONE;
constexpr AnimationState AnimationState_MAX = ANIMATION_STATE_STAND;
constexpr int AnimationState_ARRAYSIZE = AnimationState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnimationState_descriptor();
template<typename T>
inline const std::string& AnimationState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnimationState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnimationState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnimationState_descriptor(), enum_t_value);
}
inline bool AnimationState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AnimationState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnimationState>(
    AnimationState_descriptor(), name, value);
}
enum MonsterState : int {
  MONSTER_STATE_IDLE = 0,
  MONSTER_STATE_MOVE = 1,
  MONSTER_STATE_ATTACK = 2,
  MONSTER_STATE_DIE = 3,
  MonsterState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MonsterState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MonsterState_IsValid(int value);
constexpr MonsterState MonsterState_MIN = MONSTER_STATE_IDLE;
constexpr MonsterState MonsterState_MAX = MONSTER_STATE_DIE;
constexpr int MonsterState_ARRAYSIZE = MonsterState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MonsterState_descriptor();
template<typename T>
inline const std::string& MonsterState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MonsterState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MonsterState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MonsterState_descriptor(), enum_t_value);
}
inline bool MonsterState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MonsterState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MonsterState>(
    MonsterState_descriptor(), name, value);
}
enum InteractType : int {
  INTERACT_NEXT_STEP = 0,
  INTERACT_SPAWN_OBJECT = 1,
  InteractType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InteractType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InteractType_IsValid(int value);
constexpr InteractType InteractType_MIN = INTERACT_NEXT_STEP;
constexpr InteractType InteractType_MAX = INTERACT_SPAWN_OBJECT;
constexpr int InteractType_ARRAYSIZE = InteractType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InteractType_descriptor();
template<typename T>
inline const std::string& InteractType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InteractType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InteractType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InteractType_descriptor(), enum_t_value);
}
inline bool InteractType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InteractType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InteractType>(
    InteractType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::ObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ObjectType>() {
  return ::Protocol::ObjectType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::CreatureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::CreatureType>() {
  return ::Protocol::CreatureType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::MonsterAttackType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::MonsterAttackType>() {
  return ::Protocol::MonsterAttackType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::MoveState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::MoveState>() {
  return ::Protocol::MoveState_descriptor();
}
template <> struct is_proto_enum< ::Protocol::AnimationState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::AnimationState>() {
  return ::Protocol::AnimationState_descriptor();
}
template <> struct is_proto_enum< ::Protocol::MonsterState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::MonsterState>() {
  return ::Protocol::MonsterState_descriptor();
}
template <> struct is_proto_enum< ::Protocol::InteractType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::InteractType>() {
  return ::Protocol::InteractType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
